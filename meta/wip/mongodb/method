#!/bin/bash
#
# SMF method for svc:/pkgsrc/mongodb:default
# See: http://wiki.joyent.com/display/jpc2/Joyent+MongoDB+SmartMachine
# Version 1.2

. /lib/svc/share/smf_include.sh

PATH="@PREFIX@/bin:@PREFIX@/gnu/bin:@PREFIX@/sbin:/usr/bin:/usr/sbin"
HOSTNAME=$(hostname)
DATADIR="@SMF_HOME@"
MONGO_CONF="@PKG_SYSCONFDIR@/mongodb.conf"
MONGO_PID="${DATADIR}/mongodb.pid"
REPLKEY_FILE="${DATADIR}/.keyfile"
SMF_FMRI="svc:/pkgsrc/mongodb:default"

case "$1" in
  'start')
    # Get SMF properties.
    REPLSET=`svcprop -p replication/name ${SMF_FMRI} 2>/dev/null`
    REPLKEY=`svcprop -p replication/key ${SMF_FMRI} 2>/dev/null`
    REPLMEM=`svcprop -p replication/members ${SMF_FMRI} 2>/dev/null`

    # If replication is set as a master.
    if [[ ${REPLSET} != \"\" && ${REPLSET} != "astring:" ]] && [[ ${REPLKEY} != \"\" && ${REPLKEY} != "astring:" ]] && [[ ${REPLMEM} != \"\" && ${REPLMEM} != "astring:" ]]; then

      # Do replication/key check.
      [[ ${#REPLKEY} -gt 1024 ]] || [[ ${#REPLKEY} -lt 6 ]] && echo "ERROR - replication/key must be between 6 and 1024 characters." && exit 2;  
      # Check that replication/members are valid ip:port or hostname:port combinations.
      IFS=,
      for i in ${REPLMEM}; do
        if [[ $(echo ${i} | egrep "^((([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])\.){3})([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9]):0*(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[1-9])$") ]] || [[ $(echo ${i} | egrep "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)+([a-zA-Z0-9]{2,5}):0*(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[1-9])$") ]]; then
          :
        else
          echo "ERROR - ${i} must be a valid ip:port or hostname:port combination." && exit 2
        fi
      done
      unset IFS

      # Create MongoDB replication key file.
      echo "${REPLKEY}" > ${REPLKEY_FILE}
      chown mongodb:mongodb ${REPLKEY_FILE}
      chmod 600 ${REPLKEY_FILE}

      # Run MongoDB with replication settings.
      mongod --fork -f ${MONGO_CONF} --pidfilepath ${MONGO_PID} --replSet ${REPLSET} --keyFile ${REPLKEY_FILE}

    # If replication is set as a slave.
    elif [[ ${REPLSET} != \"\" && ${REPLSET} != "astring:" ]] && [[ ${REPLKEY} != \"\" && ${REPLKEY} != "astring:" ]] && [[ ${REPLMEM} == \"\" || ${REPLMEM} == "astring:" ]]; then

      # Do replication/key check.
      [[ ${#REPLKEY} -gt 1024 ]] || [[ ${#REPLKEY} -lt 6 ]] && echo "ERROR - replication/key must be between 6 and 1024 characters." && exit 2;  

      # Create MongoDB replication key file.
      echo "${REPLKEY}" > ${REPLKEY_FILE}
      chown mongodb:mongodb ${REPLKEY_FILE}
      chmod 600 ${REPLKEY_FILE}

      # Run MongoDB with replication settings.
      mongod --fork -f ${MONGO_CONF} --pidfilepath ${MONGO_PID} --replSet ${REPLSET} --keyFile ${REPLKEY_FILE}

    # If replication is set as neither master or slave.
    else
      echo "starting regular."
      mongod --fork -f ${MONGO_CONF} --pidfilepath ${MONGO_PID}
    fi
    ;;

  'stop')
    [[ -s ${MONGO_PID} ]] && kill $(cat ${MONGO_PID}) 2>/dev/null
    ;;

  'restart')
    [[ -s ${MONGO_PID} ]] && kill $(cat ${MONGO_PID}) 2>/dev/null
    sleep 3
    mongod --fork -f ${MONGO_CONF} --pidfilepath ${MONGO_PID}
    ;;

  *)
    echo "usage: $0 { start | stop | restart }"
    exit 2
    ;;
esac

exit
